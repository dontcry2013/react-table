{"version":3,"sources":["redux/user/userTypes.js","redux/user/userReducer.js","redux/post/postTypes.js","redux/post/postReducer.js","redux/rootReducer.js","columns/userColumns.js","redux/user/userActions.js","redux/post/postActions.js","columns/postColumns.js","components/PostsTable.js","components/TableContainer.js","App.js","index.js"],"names":["initialState","loading","users","error","reducer","state","action","type","Object","objectSpread2","payload","posts","rootReducer","combineReducers","user","userReducer","post","postReducer","userColumns","title","dataIndex","key","render","record","address","city","company","name","fetchUsersRequest","fetchUsersSuccess","fetchUsersFailure","fetchPostsRequest","fetchPostsSuccess","fetchPostsFailure","postColumns","PostsTable","data","react_default","a","createElement","Fragment","table","rowKey","dataSource","columns","pagination","Search","Input","TableContainer","dispatch","useDispatch","tableState","useSelector","postSelected","_useState","useState","_useState2","slicedToArray","searchVal","setSearchVal","_useState3","_useState4","filteredData","setFilteredData","_useState5","_useState6","searchIndex","setSearchIndex","_useState7","_useState8","isModalVisible","setIsModalVisible","_useState9","_useState10","postState","setPostState","useEffect","axios","get","then","response","catch","message","crawl","allValues","push","searchInd","map","toString","handleData","reqData","index","toLowerCase","indexOf","filter","onChange","e","target","value","placeholder","enterButton","style","position","top","left","width","marginTop","onRow","rowIndex","onClick","event","userId","params","fetchPosts","id","modal","centered","visible","onOk","onCancel","store","createStore","applyMiddleware","thunk","App","es","rootElement","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.b1a78aaf.chunk.js","sourcesContent":["export const FETCH_USERS_REQUEST = \"FETCH_USERS_REQUEST\";\nexport const FETCH_USERS_SUCCESS = \"FETCH_USERS_SUCCESS\";\nexport const FETCH_USERS_FAILURE = \"FETCH_USERS_FAILURE\";\n","import * as userTypes from \"./userTypes\";\n\nconst initialState = {\n  loading: false,\n  users: [],\n  error: \"\"\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case userTypes.FETCH_USERS_REQUEST:\n      return {\n        ...state,\n        loading: true\n      };\n    case userTypes.FETCH_USERS_SUCCESS:\n      return {\n        loading: false,\n        users: action.payload,\n        error: \"\"\n      };\n    case userTypes.FETCH_USERS_FAILURE:\n      return {\n        loading: false,\n        users: [],\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","export const FETCH_POST_REQUEST = \"FETCH_POST_REQUEST\";\nexport const FETCH_POST_SUCCESS = \"FETCH_POST_SUCCESS\";\nexport const FETCH_POST_FAILURE = \"FETCH_POST_FAILURE\";","import * as postTypes from \"./postTypes\";\n\nconst initialState = {\n  loading: false,\n  posts: [],\n  error: \"\"\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case postTypes.FETCH_POST_REQUEST:\n      return {\n        ...state,\n        loading: true\n      };\n    case postTypes.FETCH_POST_SUCCESS:\n      return {\n        loading: false,\n        posts: action.payload,\n        error: \"\"\n      };\n    case postTypes.FETCH_POST_FAILURE:\n      return {\n        loading: false,\n        posts: [],\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from \"redux\";\nimport userReducer from \"./user/userReducer\";\nimport postReducer from \"./post/postReducer\";\n\nconst rootReducer = combineReducers({\n  user: userReducer,\n  post: postReducer,\n});\n\nexport default rootReducer;\n","export const userColumns = [\r\n  {\r\n    title: \"Name\",\r\n    dataIndex: \"name\",\r\n    key: \"name\"\r\n  },\r\n  {\r\n    title: \"Email\",\r\n    dataIndex: \"email\",\r\n    key: \"email\"\r\n  },\r\n  {\r\n    title: \"City\",\r\n    key: \"city\",\r\n    render: record => {\r\n      return record.address.city;\r\n    }\r\n  },\r\n  {\r\n    title: \"Company\",\r\n    key: \"company\",\r\n    render: record => {\r\n      return record.company.name;\r\n    }\r\n  },\r\n];\r\n","import axios from \"axios\";\nimport {\n  FETCH_USERS_REQUEST,\n  FETCH_USERS_SUCCESS,\n  FETCH_USERS_FAILURE\n} from \"./userTypes\";\n\nexport const fetchUsers = () => {\n  return (dispatch) => {\n    dispatch(fetchUsersRequest());\n    axios\n      .get(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => {\n        // response.data is the users\n        const users = response.data;\n        dispatch(fetchUsersSuccess(users));\n      })\n      .catch((error) => {\n        // error.message is the error message\n        dispatch(fetchUsersFailure(error.message));\n      });\n  };\n};\n\nexport const fetchUsersRequest = () => {\n  return {\n    type: FETCH_USERS_REQUEST\n  };\n};\n\nexport const fetchUsersSuccess = (users) => {\n  return {\n    type: FETCH_USERS_SUCCESS,\n    payload: users\n  };\n};\n\nexport const fetchUsersFailure = (error) => {\n  return {\n    type: FETCH_USERS_FAILURE,\n    payload: error\n  };\n};\n","import axios from \"axios\";\nimport {\n  FETCH_POST_REQUEST,\n  FETCH_POST_SUCCESS,\n  FETCH_POST_FAILURE,\n} from './postTypes';\n\nexport const fetchPosts = (userId) => {\n  return (dispatch) => {\n    dispatch(fetchPostsRequest());\n    axios\n      .get(\"https://jsonplaceholder.typicode.com/posts\", {\n        params: {\n          userId\n        }\n      })\n      .then((response) => {\n        const posts = response.data;\n        dispatch(fetchPostsSuccess(posts));\n      })\n      .catch((error) => {\n        dispatch(fetchPostsFailure(error.message));\n      });\n  };\n};\n\nexport const fetchPostsRequest = () => {\n  return {\n    type: FETCH_POST_REQUEST\n  };\n};\n\nexport const fetchPostsSuccess = (posts) => {\n  return {\n    type: FETCH_POST_SUCCESS,\n    payload: posts\n  };\n};\n\nexport const fetchPostsFailure = (error) => {\n  return {\n    type: FETCH_POST_FAILURE,\n    payload: error\n  };\n};\n","export default [\n  {\n    title: \"Title\",\n    dataIndex: \"title\",\n    key: \"title\"\n  },\n  {\n    title: \"Body\",\n    dataIndex: \"body\",\n    key: \"body\"\n  },\n];\n","import React from 'react';\nimport { Table } from 'antd';\nimport postColumns from '../columns/postColumns'\n\nexport default ({data, loading}) => {\n\n  return (\n    <>\n      <Table\n        rowKey=\"title\"\n        dataSource={data}\n        columns={postColumns}\n        loading={loading}\n        pagination={false}\n      />\n    </>\n  )\n}","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Table, Input, Modal } from 'antd';\nimport { userColumns } from \"../columns/userColumns\";\nimport { fetchUsers } from \"../redux/user\";\nimport { fetchPosts } from \"../redux/post\";\nimport PostsTable from '../components/PostsTable';\n\nconst { Search } = Input;\n\nexport default () => {\n  const dispatch = useDispatch();\n  const tableState = useSelector((state) => state.user);\n  const postSelected = useSelector((state) => state.post);\n  const [searchVal, setSearchVal] = useState(null);\n  const [filteredData, setFilteredData] = useState([]);\n  const [searchIndex, setSearchIndex] = useState([]);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [postState, setPostState] = useState({ loading: false, posts: [] });\n\n  useEffect(() => {\n    dispatch(fetchUsers());\n  }, []);\n  \n  useEffect(() => {\n    setPostState(postSelected);\n  }, [postSelected]);\n\n  useEffect(() => {\n    const crawl = (user, allValues) => {\n      if (!allValues) allValues = [];\n      for (var key in user) {\n        if (typeof user[key] === \"object\") crawl(user[key], allValues);\n        else allValues.push(user[key] + \" \");\n      }\n      return allValues;\n    };\n    const handleData = () => {\n      setFilteredData(tableState.users);\n      const searchInd = tableState.users.map(user => {\n        const allValues = crawl(user);\n        return { allValues: allValues.toString() };\n      });\n      setSearchIndex(searchInd);\n    };\n    handleData();\n  }, [tableState]);\n\n  useEffect(() => {\n    if (searchVal) {\n      const reqData = searchIndex.map((user, index) => {\n        if (user.allValues.toLowerCase().indexOf(searchVal.toLowerCase()) >= 0)\n          return tableState.users[index];\n        return null;\n      });\n      setFilteredData(\n        reqData.filter(user => {\n          if (user) return true;\n          return false;\n        })\n      );\n    } else {\n      setFilteredData(tableState.users);\n    }\n  }, [searchVal, tableState]);\n\n  const handleOk = () => {\n    setIsModalVisible(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  return (\n    <>\n      <Search\n        onChange={(e) => setSearchVal(e.target.value)}\n        placeholder=\"Search\"\n        enterButton\n        style={{\n          position: \"sticky\",\n          top: \"0\",\n          left: \"0\",\n          width: \"200px\",\n          marginTop: \"2vh\"\n        }}\n      />\n      <br /> <br />\n      <Table\n        rowKey=\"name\"\n        dataSource={filteredData}\n        columns={userColumns}\n        loading={tableState.loading}\n        pagination={false}\n        onRow={(record, rowIndex) => {\n          return {\n            onClick: event => {\n              setPostState({\n                ...postState,\n                loading: true\n              });\n              setIsModalVisible(true);\n              dispatch(fetchPosts(record.id));\n            },\n          };\n        }}\n      />\n\n      <Modal title=\"Posts\" width={1000} centered visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\n        <PostsTable data={postState.posts} loading={postState.loading} />\n      </Modal>\n    </>\n  )\n}","import React from \"react\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport \"antd/dist/antd.css\";\nimport rootReducer from './redux/rootReducer';\nimport TableContainer from './components/TableContainer';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <TableContainer />\n    </Provider>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}